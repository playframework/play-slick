package play.api.db.slick

import play.api.Application
import play.api.Plugin
import play.libs.ReflectionsCache
import org.reflections.scanners.TypesScanner
import scala.slick.session.Database
import play.api.libs.Files
import play.api.Mode
import scala.slick.lifted.DDL
import play.api.PlayException

trait AutoDDLInterface{
  /** A map from play datasource name to slick table objects, for which an evolution with DDL statements should be autogenerated.
   */
  def tables : Map[String,Seq[slick.driver.BasicTableComponent#Table[_]]]
}

class SlickDDLPlugin(app: Application) extends Plugin {
  private val CreatedBy = "# --- Created by Slick DDL"
  private val configKey = "slick.autoddl_dbs"
  private val conf = app.configuration
  val autoDDLModuleName = conf.getString("slick.autoddl_object").getOrElse("play.api.db.slick.AutoDDL")
  def confError(msg:String,e:Option[Throwable]=None) = conf.reportError(configKey, msg, e)

  override def onStart(): Unit = {
    conf
      .getString(configKey)
      .map( _.split(",").map(_.trim).filter(_ != "") ) // remove whitespace and empty db names
      .foreach{
        _.foreach{ db =>
          if (app.mode != Mode.Prod) {
            val dir = "conf/evolutions/" + db
            val fileName = dir + "/1.sql"
            val file = app.getFile(fileName);
            if( file.exists() && !Files.readFile( file ).startsWith(CreatedBy) ){
              throw confError(
                s"File '$fileName' already exists and was not created by SlickDDLPlugin."
                +s" Please delete file or remove datasource '$db' from configuration for"
                +s" $configKey"
              )
            }
            evolutionScript(db).foreach { script =>
              Files.createDirectory(app.getFile(dir));
              Files.writeFileIfChanged(file, script);
            }
          }
        }
      }
  }
  /** Load AutoDDL object from user Play project using reflection
   */
  def fetchAutoDDLobject = {
    val mirror = scala.reflect.runtime.universe.runtimeMirror( app.classloader )
    val instance =
          try{
            mirror.reflectModule(
                    mirror.staticModule(autoDDLModuleName)
                  ).instance
          } catch { case e: reflect.internal.MissingRequirementError =>
              throw confError(
                "Could not find singleton object AutoDDL in package play.api.db.slick."
                +" In order to use Play-Slick's AutoDDL feature you need to define"
                +" it extending play.api.db.slick.AutoDDLInterface ."
              )
          }

    try{
      instance.asInstanceOf[AutoDDLInterface]
    } catch { case e: ClassCastException =>
        throw confError(
          "Found singleton object AutoDDL in package play.api.db.slick,"
          +" but it does not extend play.api.db.slick.AutoDDLInterface, which"
          +" is required."
        )
    }
  }

  /** generates DDL for given datasource */
  def evolutionScript(db:String): Option[String] = {
    val tables =
      try{
        fetchAutoDDLobject.tables
      } catch {
        case e:java.lang.LinkageError =>
          throw confError(
            s"LinkageError when trying to load play.api.db.slick.AutoDDL.tables via reflection: '$e'."
            +" In the definition of play.api.db.slick.AutoDDL.tables you probably referred to a val,"
            +" which was not yet initialized. Please refer to defs, singleton objects or alternatively"
            +" instantiate the table objects right in the definiton, e.g. like "+"""
               def tables = Map(
                 "default" -> Seq(new MyTableA,new MyTableB)
               )"""
            , Some(e)
          )
      }
    val ddls = tables
               .get(db)
               .map(_.map(_.ddl))
               .getOrElse{
                 throw confError(s"play.api.db.slick.AutoDDL.tables did not contain datasource '$db'")
               }

    val delimiter = ";" //TODO: figure this out by asking the db or have a configuration setting?

    if (ddls.nonEmpty) {
      val ddl = ddls.reduceLeft(_ ++ _)

      Some(CreatedBy+ "\n" +
      "# To stop Slick DDL generation, remove this comment and start using Evolutions\n" +
      "\n" +
      "# --- !Ups\n\n" +
      ddl.createStatements.mkString("", s"$delimiter\n", s"$delimiter\n") +
      "\n" +
      "# --- !Downs\n\n" +
      ddl.dropStatements.mkString("", s"$delimiter\n", s"$delimiter\n") +
      "\n")
    } else None
  }
}
